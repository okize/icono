// Generated by CoffeeScript 1.6.3
var Q, execFile, fs, mime, path, phantomjs, pretty, svgToPngFile, svgo, _;

fs = require('fs');

path = require('path');

execFile = require('child_process').execFile;

mime = require('mime');

_ = require('underscore');

Q = require('q');

svgo = new (require('svgo'))();

pretty = require('cssbeautify');

phantomjs = path.resolve(__dirname, '../node_modules/phantomjs/bin/phantomjs');

svgToPngFile = path.resolve(__dirname, './', 'svgToPng.js');

module.exports = {
  encodeImage: function(data, type, format) {
    var encoded, formatMap, str;
    str = ',';
    formatMap = {
      'svg': '\'data:image/svg+xml',
      'png': '\'data:image/png'
    };
    if (type === 'base64') {
      str = ';base64,';
      encoded = new Buffer(data).toString('base64');
    } else {
      encoded = encodeURIComponent(new Buffer(data).toString());
    }
    return formatMap[format] + str + encoded + '\'';
  },
  roundNum: function(num) {
    return Math.round(num).toString();
  },
  hasSpace: function(filename) {
    return filename.indexOf(' ') >= 0;
  },
  replaceSpaceInFilename: function(oldFilename, newFilename, inDir) {
    return fs.renameSync(inDir + '/' + oldFilename, inDir + '/' + newFilename);
  },
  trimExt: function(filename) {
    return filename.replace(/\.[^/.]+$/, '');
  },
  filterNonSvgFiles: function(files, dir) {
    var mimem;
    mimem = require("mime-magic");
    return _.filter(files, function(file) {
      var filePath;
      filePath = path.join(dir + '/' + file);
      fs.statSync(filePath).isFile() === true && console.log(filePath);
      mimem(filePath, function(err, type) {
        if (err) {
          return console.error(err.message);
        } else {
          return console.log("Detected mime type: %s", type);
        }
      });
      return mime.lookup(file) === 'image/svg+xml';
    });
  },
  optimizeSvg: function(data) {
    var d;
    d = Q.defer();
    svgo.optimize(data, function(result) {
      if (result.error) {
        d.reject(new Error(result.error));
      }
      return d.resolve(result);
    });
    return d.promise;
  },
  saveSvgAsPng: function(sourceFileName, destinationFileName, height, width) {
    var args, d;
    args = [phantomjs, svgToPngFile, sourceFileName, destinationFileName, height, width];
    d = Q.defer();
    execFile(process.execPath, args, function(err, stdout, stderr) {
      if (err) {
        return d.reject(new Error(err));
      } else if (stdout.length > 0) {
        return d.reject(new Error(stdout.toString().trim()));
      } else {
        return d.resolve(destinationFileName);
      }
    });
    return d.promise;
  },
  createCssRules: function(results, opts) {
    var cssClassnamePrefix, str;
    cssClassnamePrefix = opts.classname != null ? opts.classname : '';
    str = '';
    _.each(results, function(res, i) {
      str += ("." + (cssClassnamePrefix + res.name) + "{") + ("height:" + res.height + "px;") + ("width:" + res.width + "px;") + ("background-image:url(" + res.svgdatauri + ");") + "}" + (".no-inlinesvg ." + (cssClassnamePrefix + res.name) + "{") + ("background-image:url(" + res.pngdatauri + ");") + "}";
      if (!opts.nopng) {
        return str += (".no-datauri ." + (cssClassnamePrefix + res.name) + "{") + ("background-image:url('" + res.pngpath + "');") + "}";
      }
    });
    return str;
  },
  prettyCss: function(str) {
    return pretty(str);
  }
};
